
// Node JS
1- web appliaction responde html pages
2- api  reposnde with data



client
// send http request    
url : http://localhost:8080/students
type :  get post patch put delete
body :
headers:

        stategy 1: best
        http://localhost:8080/student      get  --> get all students
        http://localhost:8080/student     post --> add student   --> body 
        http://localhost:8080/student     patch --> upadte Student --> body
         http://localhost:8080/student     delete -->delete Student --> body
        http://localhost:8080/department  get --> get lalll departments


        stategy2:
        http://localhost:8080/student/update    post   --> update   -> body
        http://localhost:8080/student/add       post   --> add
        http://localhost:8080/student    get   --> get



-- web application
localhost:8081/login  get --> html login page
localhost:8081/login  post --> authentication
                                ok --> profile.html
                                not ok --> html login page

--api
localhost:8081/login  get --> // not exist onserver
localhost:8081/login  post --> authentication
                            ok -> {message:"ok"}
                            not ok -> {message:"not ok"}
                                


server  (restfull api)   express

Model -> controller-> route

MVC :
Model Folder : js files hold schema for each collection

Controller Folder:   crud operations
            js files apply crud operations on collection

Routes :  requset data endpoints 
            js files route for ech collection




// Data sent from a client in request Object

//1- url  Query String    url?id=2&name=xxx
     method : get,post, patch ,put , delete

//2- url  Parameters   url/2/xxx   
    method : get,post, patch ,put , delete

//3- http body
     method: post, patch ,put , delete



/*************************************
Database Connection  

any backends  c# --> SQLServer 
               1- Driver SQLServer (code sql server)  "select * from students"
               2- ORM object ralational mapper findAll findOne
               2-  A-  DataBase First 
                   B- Empty Model First

MongoDB   noSql        
Sql server , mySql  SQL

               Nodejs --> MongoDB
               1- driver mongoDB => use createCollection
               2- ODM Object Document Mapper  => mongoose



1-  install mongoose
2- app.js   mongoose open connection local mongoDB 
3- Model Folder  schema for each collection
4- Controller crud operation



























mongoose